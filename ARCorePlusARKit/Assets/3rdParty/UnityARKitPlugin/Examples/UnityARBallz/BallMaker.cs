using System.Collections;
using System.Collections.Generic;
using GoogleARCore.Examples.ObjectManipulation;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.XR.iOS;

public class BallMaker : MonoBehaviour {

	public GameObject andyPrefab;
    public GameObject manipulatorPrefab;
	public float createHeight;
	public float maxRayDistance = 30.0f;
	public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer
	private MaterialPropertyBlock props;

    public Camera mainCamera;

	// Use this for initialization
	void Start () {
		props = new MaterialPropertyBlock ();

	}
    //MeshRenderer renderer = ballGO.GetComponent<MeshRenderer>();
    //renderer.SetPropertyBlock(props);

	// Update is called once per frame
	void Update () {
		#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
		if (Input.GetMouseButtonDown (0)) 
		{
			Ray ray = Camera.main.ScreenPointToRay (Input.mousePosition);
			RaycastHit hit;
			//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
			//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
			if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer))
            {
                CreateObject(hit.point);
			}
		}
#else
		if (Input.touchCount > 0 )
		{
			var touch = Input.GetTouch(0);
			if (touch.phase == TouchPhase.Began)
			{

            if(IsPointerOverObject(touch.position))
		    {
		        return;
            }

            // TODO: ADD object over UI


				var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
				ARPoint point = new ARPoint {
					x = screenPosition.x,
					y = screenPosition.y
				};
						
				List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, 
					ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent);
				if (hitResults.Count > 0) {
					foreach (var hitResult in hitResults) {
						Vector3 position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);

                        CreateObject(position);

						break;
					}
				}

			}
		}
#endif
	}
	private bool IsPointerOverObject(Vector2 position)
    {
        Ray ray = mainCamera.ScreenPointToRay(position);

        if (Physics.Raycast(ray, out var hit, 100, collisionLayer))
        {
            if (hit.transform.name == "Andy")
                return true;
        }

        return false;
    }


	private void CreateObject(Vector3 position)
    {

        var andy = Instantiate(andyPrefab, position, Quaternion.identity);

        var manipulator = Instantiate(manipulatorPrefab, position, Quaternion.identity);

        andy.transform.parent = manipulator.transform;

        manipulator.GetComponent<Manipulator>().Select();
	}

}
